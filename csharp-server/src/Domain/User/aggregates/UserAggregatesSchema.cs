// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using HandInHand.Domain.User.Entities;
//
//    var userAggregatesSchema = UserAggregatesSchema.FromJson(jsonString);

namespace HandInHand.Domain.User.Entities
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Complete user data aggregates containing all game content
    /// </summary>
    public partial class UserAggregatesSchema
    {
        /// <summary>
        /// User inventory information
        /// </summary>
        [JsonProperty("inventory")]
        public InventoryEntity Inventory { get; set; }

        /// <summary>
        /// User profile information
        /// </summary>
        [JsonProperty("profile")]
        public ProfileEntity Profile { get; set; }
    }

    /// <summary>
    /// User inventory information
    ///
    /// User inventory information entity
    /// </summary>
    public partial class InventoryEntity
    {
        /// <summary>
        /// Maximum inventory capacity
        /// </summary>
        [JsonProperty("capacity")]
        public long Capacity { get; set; }

        /// <summary>
        /// Gem amount
        /// </summary>
        [JsonProperty("gems")]
        public long Gems { get; set; }

        /// <summary>
        /// Gold amount
        /// </summary>
        [JsonProperty("gold")]
        public long Gold { get; set; }

        /// <summary>
        /// List of items in inventory
        /// </summary>
        [JsonProperty("items")]
        public Item[] Items { get; set; }
    }

    public partial class Item
    {
        /// <summary>
        /// Item identifier
        /// </summary>
        [JsonProperty("id")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public string Id { get; set; }

        /// <summary>
        /// Item level (optional)
        /// </summary>
        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public long? Level { get; set; }

        /// <summary>
        /// Additional item properties
        /// </summary>
        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> Properties { get; set; }

        /// <summary>
        /// Item quantity
        /// </summary>
        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        /// <summary>
        /// Item rarity (optional)
        /// </summary>
        [JsonProperty("rarity", NullValueHandling = NullValueHandling.Ignore)]
        public Rarity? Rarity { get; set; }
    }

    /// <summary>
    /// User profile information
    ///
    /// User profile information entity
    /// </summary>
    public partial class ProfileEntity
    {
        /// <summary>
        /// Avatar identifier
        /// </summary>
        [JsonProperty("avatar")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public string Avatar { get; set; }

        /// <summary>
        /// Account creation timestamp
        /// </summary>
        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Experience points
        /// </summary>
        [JsonProperty("exp")]
        public long Exp { get; set; }

        /// <summary>
        /// User level
        /// </summary>
        [JsonProperty("level")]
        public long Level { get; set; }

        /// <summary>
        /// User nickname
        /// </summary>
        [JsonProperty("nickname")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public string Nickname { get; set; }
    }

    /// <summary>
    /// Item rarity (optional)
    /// </summary>
    public enum Rarity { Common, Epic, Legendary, Rare, Uncommon };

    public partial class UserAggregatesSchema
    {
        public static UserAggregatesSchema FromJson(string json) => JsonConvert.DeserializeObject<UserAggregatesSchema>(json, HandInHand.Domain.User.Entities.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this UserAggregatesSchema self) => JsonConvert.SerializeObject(self, HandInHand.Domain.User.Entities.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                RarityConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length >= 1 && value.Length <= 100)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length >= 1 && value.Length <= 100)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class RarityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rarity) || t == typeof(Rarity?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "common":
                    return Rarity.Common;
                case "epic":
                    return Rarity.Epic;
                case "legendary":
                    return Rarity.Legendary;
                case "rare":
                    return Rarity.Rare;
                case "uncommon":
                    return Rarity.Uncommon;
            }
            throw new Exception("Cannot unmarshal type Rarity");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rarity)untypedValue;
            switch (value)
            {
                case Rarity.Common:
                    serializer.Serialize(writer, "common");
                    return;
                case Rarity.Epic:
                    serializer.Serialize(writer, "epic");
                    return;
                case Rarity.Legendary:
                    serializer.Serialize(writer, "legendary");
                    return;
                case Rarity.Rare:
                    serializer.Serialize(writer, "rare");
                    return;
                case Rarity.Uncommon:
                    serializer.Serialize(writer, "uncommon");
                    return;
            }
            throw new Exception("Cannot marshal type Rarity");
        }

        public static readonly RarityConverter Singleton = new RarityConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length >= 1 && value.Length <= 50)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length >= 1 && value.Length <= 50)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }
}
